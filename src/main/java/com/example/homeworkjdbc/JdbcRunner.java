package com.example.homeworkjdbc;

import com.example.homeworkjdbc.util.ConnectionManager;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Scanner;

public class JdbcRunner {
    private static final String CREATE_TABLE_ADDRESS_QUERY =
            "CREATE TABLE IF NOT EXISTS address"
                    + "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "postal_code VARCHAR(10) NOT NULL,"
                    + "country VARCHAR(50) NOT NULL,"
                    + "city VARCHAR(50) NOT NULL,"
                    + "address_line VARCHAR(50) NOT NULL)";

    private static final String CREATE_TABLE_CITIZEN_QUERY =
            "CREATE TABLE IF NOT EXISTS citizen"
                    + "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                    + "name VARCHAR(50) NOT NULL,"
                    + "surname VARCHAR(50) NOT NULL,"
                    + "phone VARCHAR(10),"
                    + "address_id INT NOT NULL,"
                    + "FOREIGN KEY (address_id) REFERENCES address(id) ON UPDATE CASCADE ON DELETE CASCADE )";

    private static final Scanner SCANNER = new Scanner(System.in);

    public static void main(String[] args) throws SQLException {

        AddressDAOImpl addressDAO = new AddressDAOImpl();
        CitizenDAOImpl citizenDAO = new CitizenDAOImpl();

        try (Connection connection = ConnectionManager.open();
             Statement statement = connection.createStatement()) {
            statement.executeUpdate(CREATE_TABLE_ADDRESS_QUERY);
            statement.executeUpdate(CREATE_TABLE_CITIZEN_QUERY);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        boolean quit = false;
        System.out.println("Welcome");
        while (!quit) {
            System.out.println(Menu.getMenuStr());
            int choice = checkUserChoice(SCANNER.nextLine());
            switch (Menu.getInstance(choice)) {
                case ADD_ADDRESS: {
                    System.out.print("Type address details in the format: postal code, country, city, address line:\n" +
                            "Example: 61100, Ukraine, Kharkiv, Svetlakova st. 55-19\n");
                    for (; ; ) {
                        String[] temp = splitUserAnswer();
                        if (temp.length != 4) {
                            System.out.println("Error, the insertion format should be in the format: postal code, country, city, address line");
                            continue;
                        }
                        Address address = new Address(temp[0].trim(), temp[1].trim(), temp[2].trim(), temp[3].trim());
                        addressDAO.addAddress(address);
                        System.out.println("Address was added\n");
                        break;
                    }
                }
                break;
                case GET_ADDRESS: {
                    System.out.println("Type id of address");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    Address address = addressDAO.getAddressById(userId);
                    if (address == null) {
                        System.out.println("This address doesn't exist\n");
                        break;
                    }
                    System.out.println(address + "\n");
                }
                break;
                case DELETE_ADDRESS: {
                    System.out.println("Type id of address");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    if (addressDAO.getAddressById(userId) == null) {
                        System.out.println("This address doesn't exist\n");
                        break;
                    }
                    addressDAO.deleteAddressById(userId);
                    System.out.println("Address was deleted\n");
                }
                break;
                case GET_ALL_ADDRESSES:
                    List<Address> addresses = addressDAO.getAllAddresses();
                    for (Address address : addresses) {
                        System.out.println(address);
                    }
                    System.out.println();
                    break;
                case UPDATE_ADDRESS: {
                    System.out.println("Type id of address which you want to update");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    if (addressDAO.getAddressById(userId) == null) {
                        System.out.println("This address doesn't exist\n");
                        break;
                    }
                    System.out.print("Type address details in the format: postal code, country, city, address line:\n" +
                            "Example: 61100, Ukraine, Kharkiv, Svetlakova st. 55-19\n");

                    for (; ; ) {
                        String[] temp = splitUserAnswer();
                        if (temp.length != 4) {
                            System.out.println("Error, the insertion format should be in the format: postal code, country, city, address line");
                            continue;
                        }
                        Address address = new Address(temp[0].trim(), temp[1].trim(), temp[2].trim(), temp[3].trim());
                        addressDAO.updateAddressById(userId, address);
                        System.out.println("Address was updated\n");
                        break;
                    }
                }
                break;
                case ADD_CITIZEN: {
                    System.out.print("Type citizen details in the format: name, surname, phone, address id:\n" +
                            "Example: Oleg, Morozov, 0986687345, 1\n");

                    for (; ; ) {
                        String[] temp = splitUserAnswer();
                        if (temp.length != 4) {
                            System.out.println("Error, the insertion format should be in the format:name, surname, phone, address id");
                            continue;
                        }
                        Citizen citizen = new Citizen(temp[0].trim(), temp[1].trim(), temp[2].trim(), Integer.parseInt(temp[3].trim()));
                        citizenDAO.addCitizen(citizen);
                        System.out.println("Citizen was added\n");
                        break;
                    }
                }
                break;
                case DELETE_CITIZEN: {
                    System.out.println("Type id of citizen");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    if (citizenDAO.getCitizenById(userId) == null) {
                        System.out.println("This citizen doesn't exist\n");
                        break;
                    }
                    citizenDAO.deleteCitizenById(userId);
                    System.out.println("Citizen was deleted\n");
                }
                break;
                case GET_CITIZEN: {
                    System.out.println("Type id of citizen");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    Citizen citizen = citizenDAO.getCitizenById(userId);
                    if (citizen.getId() == 0) {
                        System.out.println("This citizen doesn't exist\n");
                        break;
                    }
                    System.out.println(citizen + "\n");
                }
                break;
                case GET_CITIZEN_BY_ADDRESS: {
                    System.out.println("Type id of address");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    if (addressDAO.getAddressById(userId) == null) {
                        System.out.println("This address doesn't exist\n");
                        break;
                    }
                    List<Citizen> citizens = citizenDAO.getCitizensByAddressId(userId);
                    for (Citizen citizen : citizens) {
                        System.out.println(citizen);
                    }
                    System.out.println();
                }
                break;
                case UPDATE_CITIZEN: {
                    System.out.println("Type id of citizen which you want to update");
                    int userId = checkUserChoice(SCANNER.nextLine());
                    if (citizenDAO.getCitizenById(userId) == null) {
                        System.out.println("This citizen doesn't exist\n");
                        break;
                    }
                    System.out.print("Type citizen details in the format: name, surname, phone, address id:\n" +
                            "Example: Oleg, Morozov, 0986687345, 1\n");
                    for (; ; ) {
                        String[] temp = splitUserAnswer();
                        if (temp.length != 4) {
                            System.out.println("Error, the insertion format should be in the format: name, surname, phone, address id");
                            continue;
                        }
                        Citizen citizen = new Citizen(temp[0].trim(), temp[1].trim(), temp[2].trim(), Integer.parseInt(temp[3].trim()));
                        citizenDAO.updateCitizenById(userId, citizen);
                        System.out.println("Citizen was updated\n");
                        break;
                    }
                }
                break;
                case EXIT: {
                    quit = true;
                    SCANNER.close();
                    System.out.println("Bye");
                    break;
                }
                case UNDEFINED:
                    System.out.println("Something went wrong.Try again\n");
            }
        }
    }

    private static int checkUserChoice(String userInput) {
        int answer;
        for (; ; ) {
            try {
                answer = Integer.parseInt(userInput);
                return answer;
            } catch (NumberFormatException e) {
                System.out.println("Incorrect input");
                userInput = SCANNER.nextLine();
            }
        }
    }

    private static String[] splitUserAnswer() {
        String userAddress = SCANNER.nextLine().trim();
        return userAddress.split(",");
    }
}